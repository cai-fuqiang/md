 If reclaim is encountering an excessive number of pages
    under writeback and this page is both under writeback and
    PageReclaim then it indicates that pages are being queued
    for IO but are being recycled through the LRU before the
    IO can complete. Waiting on the page itself risks an
    indefinite stall if it is impossible to writeback the
    page due to IO error or disconnected storage so instead
    block for HZ/10 or until some IO completes then clear the
    ZONE_WRITEBACK flag to recheck if the condition exists.

2) Global reclaim encounters a page, memcg encounters a
   page that is not marked for immediate reclaim or
   the caller does not have __GFP_IO. In this case mark
   the page for immediate reclaim and continue scanning.

   __GFP_IO is checked  because a loop driver thread might
   enter reclaim, and deadlock if it waits on a page for
   which it is needed to do the write (loop masks off
   __GFP_IO|__GFP_FS for this reason); but more thought
   would probably show more reasons.

   Don't require __GFP_FS, since we're not going into the
   FS, just waiting on its writeback completion. Worryingly,
   ext4 gfs2 and xfs allocate pages with
   grab_cache_page_write_begin(,,AOP_FLAG_NOFS), so testing
   may_enter_fs here is liable to OOM on them.

3) memcg encounters a page that is not already marked
   PageReclaim. memcg does not have any dirty pages
   throttling so we could easily OOM just because too many
   pages are in writeback and there is nothing else to
   reclaim. Wait for the writeback to complete.

